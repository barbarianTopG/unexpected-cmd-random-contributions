if unexpected_LOAD then return end
pcall(function() getgenv().unexpected_LOAD = true end)

function missing(t, f, fallback)
    if type(f) == t then return f end
    return fallback
end

--#core
cloneref = missing("function", cloneref, function(...) return ... end)
queueteleport =  missing("function", queue_on_teleport or (syn and syn.queue_on_teleport) or (fluxus and fluxus.queue_on_teleport))
--#coreEnd

--#imports
COREGUI = cloneref(game:GetService("CoreGui"))
PLRS = cloneref(game:GetService("Players"))
UIS = cloneref(game:GetService("UserInputService"))
RS = cloneref(game:GetService("RunService"))
GS = cloneref(game:GetService("GuiService"))
LP = cloneref(PLRS.LocalPlayer)
TS = cloneref(game:GetService("TweenService"))
HS = cloneref(game:GetService("HttpService"))
TPS = cloneref(game:GetService("TeleportService"))
WS = cloneref(game:GetService("Workspace"))
VU = cloneref(game:GetService("VirtualUser"))
CAM = cloneref(WS.CurrentCamera)
MOBILE = UIS.TouchEnabled -- ← I do think theres a better way of doing this
--#importsEnd

--#importFuncs
CHAR = LP.Character or LP.CharacterAdded:Wait() 
HUM = cloneref(CHAR:WaitForChild("Humanoid")) -- ← Rather do this than call a function everytime
HRP = cloneref(CHAR:WaitForChild("HumanoidRootPart"))
--#importFuncsEnd

local currentVersion = "1.4"
local function randomString(length, charset)
	length = length or math.random(10, 20)
	charset = charset or "abcdefghijklmnopqRStuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	local chars = {}
	local charsetLength = #charset
	for i = 1, length do
		local rand = math.random(1, charsetLength)
		chars[i] = charset:sub(rand, rand)
	end
	return table.concat(chars)
end

local gui = Instance.new("ScreenGui")
gui.Name = randomString()
gui.Parent = gethui() or COREGUI

local commandbar = Instance.new("Frame", gui)
commandbar.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
commandbar.Position = UDim2.new(0.5, -159, 1, -160)
commandbar.Size = UDim2.new(0, 318, 0, 60)
Instance.new("UIStroke", commandbar).Color = Color3.fromRGB(60, 60, 60)

local predictor = Instance.new("TextLabel", commandbar)
predictor.BackgroundTransparency = 1
predictor.Position = UDim2.new(0.5, -142, 0.5, -25)
predictor.Size = UDim2.new(0, 284, 0, 50)
predictor.Font = Enum.Font.Gotham
predictor.TextColor3 = Color3.fromRGB(100, 100, 100)
predictor.TextSize = 20
predictor.TextXAlignment = Enum.TextXAlignment.Left
predictor.Text = ""
predictor.ZIndex = 1

local command = Instance.new("TextBox", commandbar)
command.BackgroundTransparency = 1
command.Position = predictor.Position
command.Size = predictor.Size
command.Font = Enum.Font.Gotham
command.PlaceholderText = "unexpected v"..currentVersion
command.Text = ""
command.ClearTextOnFocus = false
command.TextColor3 = Color3.fromRGB(255, 255, 255)
command.TextSize = 20
command.TextXAlignment = Enum.TextXAlignment.Left
command.ZIndex = 2

local commandlist = Instance.new("Frame", gui)
commandlist.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
commandlist.Position = UDim2.new(0.5, -159,1, -455)
commandlist.Size = UDim2.new(0, 318, 0, 285)
commandlist.Visible = false
Instance.new("UIStroke", commandlist).Color = Color3.fromRGB(60, 60, 60)

local header = Instance.new("TextLabel", commandlist)
header.BackgroundTransparency = 1
header.Position = UDim2.new(0.05, 0, 0.056, 0)
header.Size = UDim2.new(0, 286, 0, 26)
header.Font = Enum.Font.Gotham
header.Text = "command list"
header.TextColor3 = Color3.fromRGB(178, 178, 178)
header.TextSize = 20
header.TextXAlignment = Enum.TextXAlignment.Left

local scrollinglist = Instance.new("ScrollingFrame", commandlist)
scrollinglist.Active = true
scrollinglist.BackgroundTransparency = 1
scrollinglist.Position = UDim2.new(0.05, 0,0.312, 0)
scrollinglist.Size = UDim2.new(0, 286,0, 180)
scrollinglist.ScrollBarThickness = 0
scrollinglist.CanvasSize = UDim2.new()

local commandexample = Instance.new("TextButton")
commandexample.BackgroundTransparency = 1
commandexample.Size = UDim2.new(0, 286, 0, 31)
commandexample.Font = Enum.Font.Gotham
commandexample.TextColor3 = Color3.fromRGB(255, 255, 255)
commandexample.TextSize = 16
commandexample.TextXAlignment = Enum.TextXAlignment.Left
commandexample.Visible = false

local unexpected = {}
local commandListData = {}
local index = 0
function unexpected:AddCommand(name, desc, func, aliases, usageArgs)
	aliases = aliases or {}
	usageArgs = usageArgs or {}

	local displayName = name
	local actualName = name:gsub("^%[.-%]%s*", "")

	local entry = {
		Original = actualName,
		Description = desc,
		Execute = func,
		Aliases = aliases,
	}

	commandListData[actualName:lower()] = entry
	for _, alias in ipairs(aliases) do
		commandListData[alias:lower()] = entry
	end

	local btn = commandexample:Clone()
	local allNames = {displayName}
	for _, alias in ipairs(aliases) do table.insert(allNames, alias) end
	btn.Text = table.concat(allNames, " / ")
	btn.Visible = true
	btn.Position = UDim2.new(0, 0, 0, index * 32)
	btn.Parent = scrollinglist

	local usage = "usage: " .. actualName
	if #usageArgs > 0 then usage = usage .. " [" .. table.concat(usageArgs, "] [") .. "]" end

	local tooltip = Instance.new("TextLabel")
	tooltip.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	tooltip.Visible = false
	tooltip.Font = Enum.Font.Gotham
	tooltip.TextColor3 = Color3.fromRGB(255, 255, 255)
	tooltip.TextSize = 18
	tooltip.TextWrapped = true
	tooltip.TextXAlignment = Enum.TextXAlignment.Left
	tooltip.TextYAlignment = Enum.TextYAlignment.Top
	tooltip.ZIndex = 9999
	tooltip.AutomaticSize = Enum.AutomaticSize.XY
	tooltip.Size = UDim2.new(0, 300, 0, 0)
	tooltip.Parent = gui
	tooltip.BorderSizePixel = 0
	Instance.new("UIStroke", tooltip).Color = Color3.fromRGB(60, 60, 60)

	local padding = Instance.new("UIPadding", tooltip)
	padding.PaddingTop = UDim.new(0, 6)
	padding.PaddingBottom = UDim.new(0, 6)
	padding.PaddingLeft = UDim.new(0, 8)
	padding.PaddingRight = UDim.new(0, 8)

	local constraint = Instance.new("UITextSizeConstraint", tooltip)
	constraint.MaxTextSize = 18

	local onHover = false
	local hoverToken = nil

	btn.MouseEnter:Connect(function()
		onHover = true
		local mousePos = UIS:GetMouseLocation() - GS:GetGuiInset()
		tooltip.Position = UDim2.new(0, mousePos.X + 10, 0, mousePos.Y + 10)
		tooltip.Text = desc .. "\n" .. usage
		tooltip.Visible = true
		hoverToken = tick()
	end)

	btn.MouseLeave:Connect(function()
		local thisToken = tick()
		hoverToken = thisToken
		onHover = false
		if hoverToken == thisToken then
			tooltip.Visible = false
		end
	end)

	RS.RenderStepped:Connect(function()
		if onHover and tooltip.Visible then
			local mousePos = UIS:GetMouseLocation() - GS:GetGuiInset()
			tooltip.Position = UDim2.new(0, mousePos.X + 10, 0, mousePos.Y + 10)
		end
	end)

	btn.MouseButton1Click:Connect(function()
		command.Text = actualName
		task.wait(0.01)
		command:CaptureFocus()
	end)

	index += 1
	scrollinglist.CanvasSize = UDim2.new(0, 0, 0, index * 32)
end

--#notification
local notificationQueue = {}
local isNotif = false

local notifUI = Instance.new("Frame")
notifUI.Name = "notification"
notifUI.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
notifUI.BorderSizePixel = 0
notifUI.AnchorPoint = Vector2.new(0, 1)
notifUI.Position = UDim2.new(0.5, 170, 1, -100)
notifUI.Size = UDim2.new(0, 208, 0, 169)
notifUI.Visible = false
notifUI.Parent = gui
Instance.new("UIStroke", notifUI).Color = Color3.fromRGB(60, 60, 60)

local notiftitle = Instance.new("TextLabel", notifUI)
notiftitle.Name = "notiftitle"
notiftitle.BackgroundTransparency = 1
notiftitle.Position = UDim2.new(0.074, 0, 0.092, 0)
notiftitle.Size = UDim2.new(0, 177, 0, 20)
notiftitle.Font = Enum.Font.Gotham
notiftitle.Text = "Notification"
notiftitle.TextColor3 = Color3.fromRGB(178, 178, 178)
notiftitle.TextSize = 20
notiftitle.TextXAlignment = Enum.TextXAlignment.Left

local notiftext = Instance.new("TextLabel", notifUI)
notiftext.Name = "notiftext"
notiftext.BackgroundTransparency = 1
notiftext.Position = UDim2.new(0.074, 0, 0.26, 0)
notiftext.Size = UDim2.new(0, 177, 0, 113)
notiftext.Font = Enum.Font.Gotham
notiftext.Text = "Lorem ipsum"
notiftext.TextWrapped = true
notiftext.TextXAlignment = Enum.TextXAlignment.Left
notiftext.TextYAlignment = Enum.TextYAlignment.Top
notiftext.TextColor3 = Color3.fromRGB(178, 178, 178)
notiftext.TextSize = 20

local loadingBar = Instance.new("Frame", notifUI)
loadingBar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
loadingBar.BorderSizePixel = 0
loadingBar.Position = UDim2.new(0, 0, 1, -4)
loadingBar.Size = UDim2.new(1, 0, 0, 4)
loadingBar.AnchorPoint = Vector2.new(0, 1)

function unexpected:notify(title, ...)
    local args = {...}
    local text = table.concat(args, " ")

    table.insert(notificationQueue, {
        title = tostring(title or "Notification"),
        text = text
    })

    local total = #notificationQueue
    if isNotif then
        local currentTitle = notiftitle.Text:match("^(.-) %(%d+%)$") or notiftitle.Text
        notiftitle.Text = string.format("%s (%d)", currentTitle, total + 1)
    else
        notifQueue()
    end
end

local notifPos = notifUI.Position
function notifQueue()
	if #notificationQueue == 0 then
		isNotif = false

		local fadeOutTween = TS:Create(notifUI, TweenInfo.new(0.25), {
			BackgroundTransparency = 1,
			Position = notifPos + UDim2.new(0, 0, 0, 10),
		})
		for _, v in ipairs(notifUI:GetDescendants()) do
			if v:IsA("TextLabel") then
				TS:Create(v, TweenInfo.new(0.25), {TextTransparency = 1}):Play()
			end
		end
		fadeOutTween:Play()

		task.delay(0.3, function()
			notifUI.Visible = false
			notifUI.BackgroundTransparency = 0
			for _, v in ipairs(notifUI:GetDescendants()) do
				if v:IsA("TextLabel") then
					v.TextTransparency = 0
				end
			end
			notifUI.Position = notifPos -- ← reset cleanly [upd: should be the best way?]
		end)
		return
	end

	isNotif = true
	local data = table.remove(notificationQueue, 1)

	local total = #notificationQueue + 1
	notiftitle.Text = string.format("%s (%d)", tostring(data.title), total)
	notiftext.Text = tostring(data.text or "")
	loadingBar.Size = UDim2.new(1, 0, 0, 4)
	notifUI.Visible = true

	if total == 1 then
		notifUI.BackgroundTransparency = 1
		for _, v in ipairs(notifUI:GetDescendants()) do
			if v:IsA("TextLabel") then
				v.TextTransparency = 1
			end
		end

		TS:Create(notifUI, TweenInfo.new(0.25), {
			BackgroundTransparency = 0,
			Position = notifPos,
		}):Play()
		for _, v in ipairs(notifUI:GetDescendants()) do
			if v:IsA("TextLabel") then
				TS:Create(v, TweenInfo.new(0.25), {TextTransparency = 0}):Play()
			end
		end
	end

	local barTween = TS:Create(loadingBar, TweenInfo.new(5, Enum.EasingStyle.Linear), {
		Size = UDim2.new(0, 0, 0, 4)
	})
	barTween:Play()

	task.delay(5, notifQueue)
end
--#notificationEnd

--#inputs
UIS.InputBegan:Connect(function(input, processed) -- ← i do think there's a better way on making this
    if input.KeyCode == Enum.KeyCode.Semicolon then
        task.wait(0.01)
        command.Text = ""
        predictor.Text = ""
        command:CaptureFocus()
    end
end)

command:GetPropertyChangedSignal("Text"):Connect(function()
    local input = command.Text
    local cmdName = input:match("^%S+") or ""
    local suggestion = ""

    if input ~= "" then
        local bestMatch = nil
        for key, data in pairs(commandListData) do
            if key:sub(1, #cmdName) == cmdName:lower() then
                if not bestMatch or key < bestMatch.key then
                    bestMatch = { key = key, data = data }
                end
            end
        end

        if bestMatch then
            local completion = bestMatch.key:sub(#cmdName + 1)
            suggestion = input .. completion
        end
    end

    predictor.Text = suggestion
end)

command.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local inputText = command.Text
        local cmdName, argsText = inputText:match("^(%S+)%s*(.*)$")
        if not cmdName then return end

        local cmd = commandListData[cmdName:lower()]
        if cmd then
            local args = {}
            for arg in argsText:gmatch("%S+") do
                table.insert(args, arg)
            end
            cmd.Execute(unpack(args))
        end

        command.Text = ""
        predictor.Text = ""
    end
end)
--#inputsEnd

--#search
local search = Instance.new("Frame")
local searchBox = Instance.new("TextBox")

search.Name = "search"
search.Parent = commandlist
search.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
search.BorderColor3 = Color3.fromRGB(0, 0, 0)
search.BorderSizePixel = 0
search.Position = UDim2.new(0.550314486, -159, 1.76491225, -455)
search.Size = UDim2.new(0, 286, 0, 31)
search.Parent = commandlist

local sStroke = Instance.new("UIStroke")
sStroke.Color = Color3.fromRGB(60, 60, 60)
sStroke.Thickness = 1
sStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
sStroke.Parent = search

searchBox.Parent = search
searchBox.BackgroundColor3 = Color3.fromRGB(9, 9, 9)
searchBox.BackgroundTransparency = 1
searchBox.BorderSizePixel = 0
searchBox.Position = UDim2.new(0.0471699312, 0, 0, 0)
searchBox.Size = UDim2.new(0, 260, 0, 30)
searchBox.Font = Enum.Font.Gotham
searchBox.PlaceholderText = "Search a command"
searchBox.Text = ""
searchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
searchBox.TextSize = 14
searchBox.TextXAlignment = Enum.TextXAlignment.Left

local function updateList(filter) -- ← debloat some lines here
	filter = filter:lower()
	local all, visible = {}, {}

	for _, c in ipairs(scrollinglist:GetChildren()) do
		if c:IsA("TextButton") then
			table.insert(all, c)
			if c.Visible then table.insert(visible, c) end
		end
	end

	if filter == "" then
		for i, btn in ipairs(all) do
			btn.Position = UDim2.new(0, 0, 0, (i - 1) * 32)
		end
		return
	end

	table.sort(visible, function(a, b)
		local am = a.Text:lower():find(filter) and 1 or 0
		local bm = b.Text:lower():find(filter) and 1 or 0
		return am > bm or (am == bm and a.Text < b.Text)
	end)

	for i, btn in ipairs(visible) do
		btn.Position = UDim2.new(0, 0, 0, (i - 1) * 32)
	end
end

searchBox:GetPropertyChangedSignal("Text"):Connect(function()
	updateList(searchBox.Text)
end)
--#searchEnd

--#utils
local configFile = "unexpected_config.json"

local defaultConfig = {
	keepUX = true,
}

function UX_rconfig()
	local config = {}

	if isfile(configFile) then
		local success, content = pcall(readfile, configFile)
		if success and content then
			local parsed = nil
			local ok, err = pcall(function()
				parsed = HS:JSONDecode(content)
			end)
			if ok and typeof(parsed) == "table" then
				config = parsed
			end
		end
	end

	for key, default in pairs(defaultConfig) do
		local val = config[key]
		if val == nil then
			val = default
		end
		config[key] = val
		getgenv()[key] = val
	end

	local success, err = pcall(function()
		writefile(configFile, HS:JSONEncode(config))
	end)
	if not success then
		unexpected:notify("[unexpected]", err)
	end
end

function UX_config()
	local toSave = {}
	for key in pairs(defaultConfig) do
		toSave[key] = getgenv()[key]
	end
	local success, err = pcall(function()
		writefile(configFile, HS:JSONEncode(toSave))
	end)
	if not success then
		unexpected:notify("[unexpected]", err)
	end
end
--#utilsEnd

--#uiToggles
local isVisible = false
local fadeTweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

local indicatorCircle = Instance.new("Frame")
indicatorCircle.Size = MOBILE and UDim2.new(0, 32, 0, 32) or UDim2.new(0, 10, 0, 10)
indicatorCircle.Position = UDim2.new(1, -40, 1, -40)
indicatorCircle.AnchorPoint = Vector2.new(1, 1)
indicatorCircle.BackgroundColor3 = Color3.fromRGB(0, 85, 198)
indicatorCircle.BorderSizePixel = 0
indicatorCircle.Visible = true
indicatorCircle.ZIndex = 999
indicatorCircle.Parent = gui
indicatorCircle.BackgroundTransparency = 0.1
indicatorCircle.Name = "MobileIndicator"
indicatorCircle.ClipsDescendants = true
indicatorCircle.Active = true
Instance.new("UICorner", indicatorCircle)

local function fadeUI(show)
	isVisible = show
	if show then
		commandbar.Visible = true
		indicatorCircle.Visible = false
		TS:Create(commandbar, fadeTweenInfo, {BackgroundTransparency = 0}):Play()
		for _, v in ipairs(commandbar:GetDescendants()) do
			if v:IsA("TextLabel") or v:IsA("TextBox") or v:IsA("TextButton") then
				TS:Create(v, fadeTweenInfo, {TextTransparency = 0}):Play()
			elseif v:IsA("UIStroke") then
				TS:Create(v, fadeTweenInfo, {Transparency = 0}):Play()
			end
		end
	else
		local fadeOut = TS:Create(commandbar, fadeTweenInfo, {BackgroundTransparency = 1})
		fadeOut:Play()
		for _, v in ipairs(commandbar:GetDescendants()) do
			if v:IsA("TextLabel") or v:IsA("TextBox") or v:IsA("TextButton") then
				TS:Create(v, fadeTweenInfo, {TextTransparency = 1}):Play()
			elseif v:IsA("UIStroke") then
				TS:Create(v, fadeTweenInfo, {Transparency = 1}):Play()
			end
		end
		task.delay(0.26, function()
			commandbar.Visible = false
			indicatorCircle.Visible = true
		end)
	end
end

local dragging, dragInput, dragStart, startPos
indicatorCircle.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = indicatorCircle.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

indicatorCircle.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement then
		dragInput = input
	end
end)

indicatorCircle.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
		fadeUI(true)
		task.delay(10, function()
			if not command:IsFocused() then
				fadeUI(false)
			end
		end)
	end
end)

UIS.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		indicatorCircle.Position = UDim2.new(
			startPos.X.Scale,
			startPos.X.Offset + delta.X,
			startPos.Y.Scale,
			startPos.Y.Offset + delta.Y
		)
	end
end)

UIS.InputBegan:Connect(function(input, processed)
	if not processed and input.KeyCode == Enum.KeyCode.Semicolon then
		command:CaptureFocus()
	end
end)

command.Focused:Connect(function()
	fadeUI(true)
end)

local lastFocusLost = 0

command.FocusLost:Connect(function()
	lastFocusLost = tick()
	task.delay(2, function()
		if tick() - lastFocusLost >= 1.95 then
			if not command:IsFocused() and command.Text == "" then
				fadeUI(false)
			end
		end
	end)
end)

command.Focused:Connect(function()
	if not isVisible then
		fadeUI(true)
	end
end)
--#uiTogglesEnd

--#commands
unexpected:AddCommand("unexspy", "Remote spy", function()
	unexpected:notify("unexspy", "Running")
	loadstring(game:HttpGet("https://raw.githubusercontent.com/hashed-cmd/unexpected-cmd/refs/heads/main/misc/unexspy",true))()
end, {"remotespy"}, nil)

unexpected:AddCommand("goto", "Teleport to a player", function(targetName)
    local target
    if targetName:lower() == "random" then
        local players = PLRS:GetPlayers()
        local candidates = {}
        for _, player in pairs(players) do
            if player ~= LP then
                table.insert(candidates, player)
            end
        end
        if #candidates > 0 then
            target = candidates[math.random(#candidates)]
        else
            return unexpected:notify("goto", "No players available, try again.")
        end
    else
        for _, player in pairs(PLRS:GetPlayers()) do
            if player.DisplayName:lower() == targetName:lower() or player.Name:lower() == targetName:lower() then
                target = player
                break
            end
        end
    end
    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        HRP.CFrame = target.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
    end
end, nil, {"playerName"})

local noclip
unexpected:AddCommand("noclip", "Walk through walls", function()
    if noclip then return unexpected:notify("noclip", "Already noclipping.") end
    noclip = RS.Stepped:Connect(function()
        for _, p in ipairs(CHAR:GetDescendants()) do
            if p:IsA("BasePart") then p.CanCollide = false end
        end
    end)
end)

unexpected:AddCommand("unnoclip", "Disable noclip", function()
    if noclip then
        noclip:Disconnect()
        noclip = nil
    end
    for _, p in ipairs(CHAR:GetDescendants()) do
        if p:IsA("BasePart") then p.CanCollide = true end
    end
end, {"clip"}, nil)

unexpected:AddCommand("reset", "Resets your character", function()
    CHAR:BreakJoints()
end)

unexpected:AddCommand("clearhats", "Removes all hats", function()
    for _, item in ipairs(CHAR:GetChildren()) do
        if item:IsA("Accessory") then
            item:Destroy()
        end
    end
end)

unexpected:AddCommand("pos", "Prints your position", function()
    unexpected:notify("position", tostring(HRP.Position))
end)

unexpected:AddCommand("platformstand", "Toggles PlatformStand", function()
    HUM.PlatformStand = not HUM.PlatformStand
end)

unexpected:AddCommand("resetcam", "Resets the camera to your character", function()
    WS.CurrentCamera.CameraSubject = HUM
end)

unexpected:AddCommand("flip", "Flips your character upside down", function()
    if HRP then
        HRP.CFrame = HRP.CFrame * CFrame.Angles(math.pi, 0, 0)
    end
end)

unexpected:AddCommand("glide", "Enable glide mode (slow fall)", function()
    HUM.JumpPower = 0
    HUM.AutoRotate = false
    local sv = Instance.new("BodyVelocity")
    sv.Name = "GlideVelocity"
    sv.MaxForce = Vector3.new(0, 10000, 0)
    sv.Velocity = Vector3.new(0, -10, 0)
    sv.Parent = HRP or CHAR.PrimaryPart
end)


unexpected:AddCommand("unglide", "Disable glide mode", function()
    local glide = HRP:FindFirstChild("GlideVelocity")
    if glide then glide:Destroy() end
    HUM.JumpPower = 50
    HUM.AutoRotate = true
end)

unexpected:AddCommand("iceslide", "Slide around with low friction", function()
    for _, part in ipairs(CHAR:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CustomPhysicalProperties = PhysicalProperties.new(0.1, 0.3, 0.5)
        end
    end
end)

unexpected:AddCommand("uniceslide", "Restore normal walking friction", function()
    for _, part in ipairs(CHAR:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
        end
    end
end)

unexpected:AddCommand("walkspeed", "Set your walkspeed", function(speed)
    HUM.WalkSpeed = tonumber(speed) or 16
end, nil, {"speed"})

unexpected:AddCommand("jumppower", "Set your jumppower", function(power)
    HUM.JumpPower = tonumber(power) or 50
end, nil, {"power"})

unexpected:AddCommand("sit", "Force sit", function()
    HUM.Sit = true
end)

unexpected:AddCommand("stand", "Force stand", function()
    HUM.Sit = false
    HUM:ChangeState(Enum.HumanoidStateType.GettingUp)
end, {"unsit"}, nil)

local spinning, spinConnection = false, nil
unexpected:AddCommand("spin", "Spin your character", function(speed)
    speed = tonumber(speed) or 5
    local spinning = true
    local connection = RS.Heartbeat:Connect(function()
        if spinning and HRP then
            HRP.CFrame = HRP.CFrame * CFrame.Angles(0, math.rad(speed), 0)
        end
    end)
    task.delay(10, function()
        spinning = false
        connection:Disconnect()
    end)
end, nil, {"speed"})

unexpected:AddCommand("unspin", "Stop spinning your character", function()
    if spinConnection then
        spinConnection:Disconnect()
        spinConnection = nil
    end
    spinning = false
end)

unexpected:AddCommand("stun", "Freezes your character (PlatformStand)", function()
    HUM.PlatformStand = true
end)

unexpected:AddCommand("unstun", "Remove fake stun", function()
    HUM.PlatformStand = false
end)


unexpected:AddCommand("jump", "Forces local jump", function()
    HUM:ChangeState(Enum.HumanoidStateType.Jumping)
end)

unexpected:AddCommand("state", "Set HumanoidState", function(args)
    local input = args[1]
    if not input then return end
    input = input:upper()
    for _, state in pairs(Enum.HumanoidStateType:GetEnumItems()) do
        if state.Name:upper() == input then
            HUM:ChangeState(state)
            return
        end
    end
end)

unexpected:AddCommand("[CLIENT] freeze", "Freeze character", function()
    for _, p in pairs(CHAR:GetChildren()) do
        if p:IsA("BasePart") then
            p.Anchored = true
        end
    end
end)

unexpected:AddCommand("[CLIENT] unfreeze", "Unfreeze your character", function()
    for _, p in pairs(CHAR:GetChildren()) do
        if p:IsA("BasePart") then
            p.Anchored = false
        end
    end
end)

unexpected:AddCommand("print", "Prints all arguments", function(...) 
    print(...) 
end, {"echo", "say"}, {"..."})

unexpected:AddCommand("notify", "Notify all arguments", function(...) 
    unexpected:notify("unexpected", ...)
end, nil, {"..."})

unexpected:AddCommand("cmds", "Shows commands", function()
	local showing = not commandlist.Visible
	commandlist.Visible = true

	local t = showing and 0 or 1
	local offset = showing and -10 or 10

	for _, obj in ipairs(commandlist:GetDescendants()) do
		if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
			pcall(function()
				TS:Create(obj, TweenInfo.new(0.25), {TextTransparency = t}):Play()
			end)
		elseif obj:IsA("UIStroke") then
			TS:Create(obj, TweenInfo.new(0.25), {Transparency = t}):Play()
		elseif obj:IsA("Frame") then
			TS:Create(obj, TweenInfo.new(0.25), {BackgroundTransparency = t}):Play()
		end
	end

	TS:Create(commandlist, TweenInfo.new(0.25), {
		BackgroundTransparency = t,
		Position = commandlist.Position + UDim2.new(0, 0, 0, offset)
	}):Play()

	if not showing then
		task.delay(0.26, function()
			commandlist.Visible = false
		end)
	end
end)

unexpected:AddCommand("rejoin", "Rejoins the current server", function()
    TPS:Teleport(game.PlaceId, LP)
end)

unexpected:AddCommand("keepUX", "Keep 'unexpected' running even on rejoin", function(state)
	state = tostring(state):lower()
	if state == "true" then
		getgenv().keepUX = true
	elseif state == "false" then
		getgenv().keepUX = false
	else
		unexpected:notify("keepUX", "Usage: keepUX true/false")
		return
	end
	UX_config()
	unexpected:notify("keepUX", "Now set to:", tostring(getgenv().keepUX))
end, nil, {"true/false"})

local flying, flyConnA, flyConnB = false, nil, nil
unexpected:AddCommand("fly", "Enable flying", function(spd)
    if flying then return unexpected:notify("flying", "Unfly first before changing speed") end
    
    local spd = tonumber(spd) or 3
    flying = true
    HUM.PlatformStand = true
    bv = Instance.new("BodyVelocity", HRP)
    bg = Instance.new("BodyGyro", HRP)
    bv.MaxForce = Vector3.one * 1e6
    bg.MaxTorque = Vector3.one * 1e6
    bg.P = 1e4
    local input = {w = 0, s = 0, a = 0, d = 0, up = 0, down = 0}
    if MOBILE then
    	HUM.StateChanged:Connect(function(_, state)
    		if state == Enum.HumanoidStateType.Jumping then
    			input.up = 1
    			task.delay(0.3, function() input.up = 0 end)
    		end
    	end)
    else
    	flyConnA = UIS.InputBegan:Connect(function(i, g)
    		if g then return end
    		local k = i.KeyCode
    		if k == Enum.KeyCode.W then input.w = 1 end
    		if k == Enum.KeyCode.S then input.s = -1 end
    		if k == Enum.KeyCode.A then input.a = -1 end
    		if k == Enum.KeyCode.D then input.d = 1 end
    		if k == Enum.KeyCode.Space then input.up = 1 end
    		if k == Enum.KeyCode.LeftShift then input.down = -1 end
    	end)
    
    	flyConnB = UIS.InputEnded:Connect(function(i)
    		local k = i.KeyCode
    		if k == Enum.KeyCode.W then input.w = 0 end
    		if k == Enum.KeyCode.S then input.s = 0 end
    		if k == Enum.KeyCode.A then input.a = 0 end
    		if k == Enum.KeyCode.D then input.d = 0 end
    		if k == Enum.KeyCode.Space then input.up = 0 end
    		if k == Enum.KeyCode.LeftShift then input.down = 0 end
    	end)
    end

    task.spawn(function()
    	while flying and HRP and CAM do
    		task.wait()
    		local moveVec
    		if MOBILE then
    			local dir = CAM.CFrame.LookVector
    			local move = HUM.MoveDirection + Vector3.new(0, input.up, 0)
    			moveVec = move.Magnitude > 0 and CFrame.new(Vector3.zero, dir):VectorToWorldSpace(move.Unit) * spd * 10 or Vector3.zero
    		else
    			local move = Vector3.new(input.a + input.d, input.up + input.down, -(input.w + input.s))
    			moveVec = CAM.CFrame:VectorToWorldSpace(move) * spd * 10
    		end
    		bv.Velocity = moveVec
    		bg.CFrame = CAM.CFrame
    		HUM:ChangeState(Enum.HumanoidStateType.FallingDown)
    	end
    end)
end, nil, {"speed"})

unexpected:AddCommand("unfly", "Disable flying", function()
    flying = false
    HUM.PlatformStand = false
    for _, x in ipairs({flyConnA, flyConnB}) do if x then pcall(function() x:Disconnect() end) end end
    for _, x in ipairs({bv, bg}) do if x then pcall(function() x:Destroy() end) end end
    task.wait()
    HUM:ChangeState(Enum.HumanoidStateType.Jumping)
end)

local afConn, lastSafe
unexpected:AddCommand("antifling", "Stops flings via velocity detection", function()
    if afConn then return end
    afConn = RS.Heartbeat:Connect(function()
        local lv, av = HRP.AssemblyLinearVelocity, HRP.AssemblyAngularVelocity
        if lv.Magnitude > 250 or av.Magnitude > 250 then
            HRP.AssemblyLinearVelocity = Vector3.zero
            HRP.AssemblyAngularVelocity = Vector3.zero
            if lastSafe then HRP.CFrame = lastSafe end
        elseif lv.Magnitude < 50 and av.Magnitude < 50 then
            lastSafe = HRP.CFrame
        end
    end)
end)

unexpected:AddCommand("unantifling", "Disables fling protection", function()
    if afConn then afConn:Disconnect() afConn = nil end
end)

local banging = false
local conn
unexpected:AddCommand("bang", "Bang someone", function(name, speedArg)
    if banging then return end
    local target
    for _, p in pairs(PLRS:GetPlayers()) do
        if p.DisplayName:lower() == name:lower() or p.Name:lower() == name:lower() then
            target = p
            break
        end
    end
    if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then return end

    local speed = tonumber(speedArg) or 5
    banging = true
    local thrp = target.Character.HumanoidRootPart
    local backDist, fwdDist = 2, 1
    local t, inwards = 0, true

    conn = RS.Heartbeat:Connect(function(dt)
        if not banging then
            conn:Disconnect()
            conn = nil
            return
        end
        local cf, lv = thrp.CFrame, thrp.CFrame.LookVector.Unit
        local backPos = cf.Position - lv * backDist
        local inPos = cf.Position - lv * (backDist - fwdDist)
        local backCf = CFrame.new(backPos, cf.Position)
        local inCf = CFrame.new(inPos, cf.Position)

        t = math.min(t + dt * speed, 1)
        HRP.CFrame = HRP.CFrame:Lerp(inwards and inCf or backCf, t)
        if t >= 1 then
            inwards = not inwards
            t = 0
        end
    end)
end, nil, {"playerName", "speed"})

unexpected:AddCommand("unbang", "Stop banging", function()
    banging = false
    if conn then conn:Disconnect() conn = nil end
end)

unexpected:AddCommand("antiafk", "Never get kicked", function()
    LP.Idled:Connect(function()
        VU:ClickButton2(Vector2.new())
    end)
end)

unexpected:AddCommand("execute", "Execute code", function(...)
    loadstring(...)()
end, nil, {...})

--#locales
UX_rconfig()

local tpCHECK = false
LP.OnTeleport:Connect(function(State)
	if getgenv().keepUX and not tpCHECK and queueteleport then
		tpCHECK = true
		queueteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/hashed-cmd/unexpected-cmd/refs/heads/main/source'))()")
	end
end)
--#localesEnd
